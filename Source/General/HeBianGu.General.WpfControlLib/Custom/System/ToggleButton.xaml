<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                     xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib"
                     xmlns:base="clr-namespace:HeBianGu.Base.WpfBase;assembly=HeBianGu.Base.WpfBase"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--<ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../SystemControls/FIcon.xaml" />
    </ResourceDictionary.MergedDictionaries>-->

    <Style TargetType="{x:Type ToggleButton}" x:Key="S.ToggleButton.Default">
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid" Margin="{TemplateBinding Padding}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Grid>
                    <!--z触发器-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource S.Brush.Accent}" />
                            <Setter Property="Opacity" Value="{StaticResource S.Opacity.Disable}" TargetName="Grid"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource S.Brush.Gray.Notice}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource S.Brush.Accent}" />
                            <Setter Property="Opacity" Value="0.8" TargetName="Grid"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource S.Opacity.Disable}" TargetName="Grid"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style> 
    
    <!--选中和未选中设置两种颜色-->
    <Style TargetType="{x:Type ToggleButton}" x:Key="S.ToggleButton.BrushFIconChecked">
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}" />
        <Setter Property="base:ControlAttachProperty.FIconSize" Value="{DynamicResource S.FIcon.Size.Large}"/>
        <Setter Property="base:ControlAttachProperty.FIconMargin" Value="1"/>
        <Setter Property="base:ControlAttachProperty.FIcon" Value="&#xe603;"/>
        <Setter Property="base:ControlAttachProperty.CheckedForegroundBrush" Value="{DynamicResource S.Brush.Accent}"/>
        <Setter Property="base:ControlAttachProperty.CheckedBackgroundBrush" Value="{DynamicResource S.Brush.Accent}"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid" Margin="{TemplateBinding Padding}">
                        <StackPanel Orientation="Horizontal" Margin="{TemplateBinding base:ControlAttachProperty.FIconMargin}">
                            <TextBlock x:Name="FIcon" 
                                   FontSize="{Binding Path=(base:ControlAttachProperty.FIconSize),RelativeSource={RelativeSource TemplatedParent}}"
                                   Text="{TemplateBinding base:ControlAttachProperty.FIcon}" 
                                   Foreground="{TemplateBinding Foreground}" 
                                   Style="{DynamicResource FIcon}" />
                            <TextBlock x:Name="txt" Text="{TemplateBinding Content}" 
                                       FontSize="{Binding Path=FontSize,RelativeSource={RelativeSource TemplatedParent}}"  
                                       Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </StackPanel>
                    </Grid>
                    <!--z触发器-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="{StaticResource S.Opacity.Disable}" TargetName="FIcon"/>
                            <Setter Property="Opacity" Value="{StaticResource S.Opacity.Disable}" TargetName="txt"/>

                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource S.Brush.Gray.Notice}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{Binding Path=(base:ControlAttachProperty.CheckedForegroundBrush),RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Background" Value="{Binding Path=(base:ControlAttachProperty.CheckedBackgroundBrush),RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Opacity" Value="{StaticResource S.Opacity.Disable}" TargetName="FIcon"/>
                            <Setter Property="Opacity" Value="{StaticResource S.Opacity.Disable}" TargetName="txt"/>

                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource S.Opacity.Disable}" TargetName="Grid"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--选中和未选中设置两种颜色-->
    <Style TargetType="{x:Type ToggleButton}" x:Key="S.ToggleButton.BrushFIconChecked.RightToLeft">
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}" />
        <Setter Property="base:ControlAttachProperty.FIconSize" Value="{DynamicResource S.FIcon.Size.Large}"/>
        <Setter Property="base:ControlAttachProperty.FIconMargin" Value="1"/>
        <Setter Property="base:ControlAttachProperty.FIcon" Value="&#xe603;"/>
        <Setter Property="base:ControlAttachProperty.CheckedForegroundBrush" Value="{DynamicResource S.Brush.Accent}"/>
        <Setter Property="base:ControlAttachProperty.CheckedBackgroundBrush" Value="{DynamicResource S.Brush.Accent}"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid" Margin="{TemplateBinding Padding}">
                        <StackPanel Orientation="Horizontal" Margin="{TemplateBinding base:ControlAttachProperty.FIconMargin}">
                          
                            <TextBlock x:Name="txt" Text="{TemplateBinding Content}" 
                                       FontSize="{Binding Path=FontSize,RelativeSource={RelativeSource TemplatedParent}}"  
                                       Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>

                            <TextBlock x:Name="FIcon" 
                                   FontSize="{Binding Path=(base:ControlAttachProperty.FIconSize),RelativeSource={RelativeSource TemplatedParent}}"
                                   Margin="{Binding Path=(base:ControlAttachProperty.FIconMargin),RelativeSource={RelativeSource TemplatedParent}}"
                                   Text="{TemplateBinding base:ControlAttachProperty.FIcon}" 
                                   Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center"
                                   Style="{DynamicResource FIcon}" />
                        </StackPanel>
                    </Grid>
                    <!--z触发器-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="{StaticResource S.Opacity.Disable}" TargetName="FIcon"/>
                            <Setter Property="Opacity" Value="{StaticResource S.Opacity.Disable}" TargetName="txt"/>

                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource S.Brush.Gray.Notice}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{Binding Path=(base:ControlAttachProperty.CheckedForegroundBrush),RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Background" Value="{Binding Path=(base:ControlAttachProperty.CheckedBackgroundBrush),RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Opacity" Value="{StaticResource S.Opacity.Disable}" TargetName="FIcon"/>
                            <Setter Property="Opacity" Value="{StaticResource S.Opacity.Disable}" TargetName="txt"/>

                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource S.Opacity.Disable}" TargetName="Grid"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--选中和未选中设置成两种图标-->
    <Style TargetType="{x:Type ToggleButton}" x:Key="S.ToggleButton.DoubleFIconChecked">
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="base:ControlAttachProperty.FIconSize" Value="{DynamicResource S.FontSize.Default}"/>
        <Setter Property="base:ControlAttachProperty.FIconMargin" Value="1"/>
        <Setter Property="base:ControlAttachProperty.FIcon" Value="&#xe81a;"/>
        <Setter Property="Content" Value="&#xe81d;"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid" Margin="{TemplateBinding Padding}">
                        <StackPanel Orientation="Horizontal" Margin="{TemplateBinding base:ControlAttachProperty.FIconMargin}">

                            <TextBlock x:Name="FIcon" 
                                   FontSize="{Binding Path=(base:ControlAttachProperty.FIconSize),RelativeSource={RelativeSource TemplatedParent}}"
                                   Text="{TemplateBinding base:ControlAttachProperty.FIcon}" 
                                   Foreground="{TemplateBinding Foreground}" 
                                   Style="{DynamicResource FIcon}" />

                        </StackPanel>
                    </Grid>
                    <!--z触发器-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource S.Brush.Accent}" />
                            <Setter Property="Opacity" Value="{DynamicResource S.Opacity.Disable}" TargetName="FIcon"/>

                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource S.Brush.Gray.Notice}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}" />
                            <Setter Property="Opacity" Value="{DynamicResource S.Opacity.Disable}" TargetName="FIcon"/>
                            <Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Content}" TargetName="FIcon"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{DynamicResource S.Opacity.Disable}" TargetName="Grid"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type ToggleButton}" x:Key="S.ToggleButton.FIconSingle">
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Assist}" />
        <Setter Property="base:ControlAttachProperty.FIconSize" Value="{DynamicResource S.FIcon.Size.Large}"/>
        <Setter Property="base:ControlAttachProperty.FIconMargin" Value="1"/>
        <Setter Property="base:ControlAttachProperty.FIcon" Value="&#xe603;"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid" Margin="{TemplateBinding Padding}">
                        <StackPanel Orientation="Horizontal" Margin="{TemplateBinding base:ControlAttachProperty.FIconMargin}">
                            <TextBlock x:Name="FIcon" 
                                   FontSize="{Binding Path=(base:ControlAttachProperty.FIconSize),RelativeSource={RelativeSource TemplatedParent}}"
                                   Text="{TemplateBinding base:ControlAttachProperty.FIcon}" 
                                   Foreground="{TemplateBinding Foreground}" 
                                   Style="{DynamicResource FIcon}" />
                            <TextBlock x:Name="txt" Text="{TemplateBinding Content}" 
                                       FontSize="{Binding Path=FontSize,RelativeSource={RelativeSource TemplatedParent}}"  
                                       Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </StackPanel>
                    </Grid>
                    <!--z触发器-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource S.Brush.Accent}" TargetName="FIcon"/>
                            <Setter Property="Foreground" Value="{DynamicResource S.Brush.Accent}" TargetName="txt"/> 
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource S.Brush.Gray.Notice}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource S.Brush.Accent}" TargetName="FIcon"/>
                            <Setter Property="Foreground" Value="{DynamicResource S.Brush.Accent}" TargetName="txt"/>
                            <Setter Property="Opacity" Value="{StaticResource S.Opacity.Disable}" TargetName="FIcon"/>
                            <Setter Property="Opacity" Value="{StaticResource S.Opacity.Disable}" TargetName="txt"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource S.Opacity.Disable}" TargetName="Grid"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" x:Key="S.ToggleButton.Combobox">
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Assist}" />
        <Setter Property="base:ControlAttachProperty.FIconSize" Value="{DynamicResource S.FIcon.Size.Small}"/>
        <Setter Property="base:ControlAttachProperty.FIconMargin" Value="0,1,3,1"/>
        <Setter Property="base:ControlAttachProperty.FIcon" Value="&#xe63a;"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Border Background="{TemplateBinding Background}" x:Name="Bg" Grid.ColumnSpan="2" Margin="0,1,1,1"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"  Opacity="0.3"/>

                        <TextBlock Grid.Column="1" x:Name="FIcon" 
                                   FontSize="{Binding Path=(base:ControlAttachProperty.FIconSize),RelativeSource={RelativeSource TemplatedParent}}"
                                   Text="{TemplateBinding base:ControlAttachProperty.FIcon}" 
                                   base:ControlAttachProperty.AllowsAnimation="{TemplateBinding IsChecked}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Style="{DynamicResource FIcon}"
                                   Margin="{TemplateBinding base:ControlAttachProperty.FIconMargin}"/>
                    </Grid>
                    <!--z触发器-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource MouseOverForeground}" />
                            <Setter Property="Opacity" TargetName="Bg" Value="0.55" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource PressedForeground}" />
                            <Setter Property="Opacity" TargetName="Bg" Value="0.6" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource PressedForeground}" />
                            <Setter Property="Opacity" TargetName="Bg" Value="0.6" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{StaticResource S.Opacity.Disable}" TargetName="Grid"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>