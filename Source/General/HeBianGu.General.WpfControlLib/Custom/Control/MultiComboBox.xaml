<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib"
                    xmlns:base="clr-namespace:HeBianGu.Base.WpfBase;assembly=HeBianGu.Base.WpfBase"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"> 
    <!--多选项样式-->
    <Style x:Key="CheckItemStyle" TargetType="{x:Type ListBoxItem}" >
        <Setter Property="Height"  Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="Background" Value="{DynamicResource S.Brush.TextBackground.Default}"/>
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.Accent}"/>
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}" >
                    <Border x:Name="Border" Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center"  Margin="{TemplateBinding Padding}">
                            <local:FCheckBox x:Name="cbx" IsChecked="{Binding Path=IsSelected,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}"
                                      >
                                <ContentPresenter Margin="{TemplateBinding Padding}"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </local:FCheckBox>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource S.Brush.Accent}" />
                            <Setter Property="Foreground"  TargetName="cbx" Value="{DynamicResource S.Brush.White.Notice}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource S.Brush.Accent.MouseOver}" />
                            <Setter Property="Foreground" TargetName="cbx" Value="{DynamicResource S.Brush.White.Notice}" />
                          
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Opacity" Value="{StaticResource S.Opacity.Disable}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--MultiComboBox普通样式-->
    <Style x:Key="DefaultMultiComboBox" TargetType="{x:Type local:MultiComboBox}">
        <Setter Property="Height"  Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="Width" Value="300" />
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}" />
        <Setter Property="Background" Value="{DynamicResource  S.Brush.TextBackground.Default}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource S.Brush.TextBorderBrush.Default}" />
        <Setter Property="base:ControlAttachProperty.FocusBackground" Value="{DynamicResource S.Brush.White.Notice}" />
        <Setter Property="base:ControlAttachProperty.FocusBorderBrush" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="base:ControlAttachProperty.MouseOverBorderBrush" Value="{DynamicResource S.Brush.Accent.MouseOver}" />
        <Setter Property="base:ControlAttachProperty.CornerRadius" Value="{DynamicResource S.Window.Item.CornerRadius}"/>
        <Setter Property="FontFamily" Value="{DynamicResource  S.FontFamily.Default}" />
        <Setter Property="FontSize" Value="{DynamicResource S.FontSize.Default}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="base:ControlAttachProperty.FIconMargin" Value="0,0,7,0" />
        <Setter Property="MaxDropDownHeight" Value="400" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MultiComboBox}">
                    <Grid x:Name="PART_Root">
                        <Border x:Name="Bg" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{TemplateBinding base:ControlAttachProperty.CornerRadius}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <Grid x:Name="PART_InnerGrid" Margin="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="25" />
                            </Grid.ColumnDefinitions>
                            
                            <!--Label区域-->
                            <ContentControl x:Name="Label" Template="{TemplateBinding base:ControlAttachProperty.LabelTemplate}" 
                                            IsTabStop="False" IsHitTestVisible="False" Foreground="{TemplateBinding Background}"
                                            Content="{TemplateBinding base:ControlAttachProperty.Label}" Margin="1,1,0,1"/>
                            
                            <!--附加内容区域-->
                            <Border
                                    Panel.ZIndex="2" 
                                    Grid.Column="2" 
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Center" >
                                <ContentControl  x:Name="PART_AttachContent"  VerticalAlignment="Center" 
                                                VerticalContentAlignment="Center"  Foreground="{DynamicResource S.Brush.TextForeground.Assist}"
                                                Template="{TemplateBinding base:ControlAttachProperty.AttachContent}" />
                            </Border>
                            
                            <!--下拉按钮--><!--
                            <ToggleButton x:Name="PART_DropDownToggle" Panel.ZIndex="1" IsTabStop="False" 
                                          Style="{DynamicResource S.ToggleButton.Combobox}" 
                                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          Grid.Column="3"  
                                          IsEnabled="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent},
                                          Converter={x:Static base:XConverter.TrueToFalseConverter},Mode=OneWay}" 
                                          Margin="0,0,0,1" Background="Transparent" Foreground="{DynamicResource S.Brush.TextForeground.Assist}"/>-->

                            <!--下拉按钮-->
                            <ToggleButton x:Name="PART_DropDownToggle" IsTabStop="False" Style="{DynamicResource ComboToggleButton}" base:ControlAttachProperty.FIconSize="15"
                                         IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                         base:ControlAttachProperty.FIconMargin="{TemplateBinding base:ControlAttachProperty.FIconMargin}"
                                         Grid.Column="1"  Grid.ColumnSpan="3" IsEnabled="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent},
                                         Converter={x:Static base:XConverter.TrueToFalseConverter},Mode=OneWay}"
                                        Foreground="{TemplateBinding Foreground}" 
                                         Background="{TemplateBinding base:ControlAttachProperty.FocusBackground}"/>
                            
                            <!--水印-->
                            <Border Grid.Column="1">
                                <TextBlock x:Name="Message"  Padding="0" Visibility="Collapsed" 
                                           Text="{TemplateBinding base:ControlAttachProperty.Watermark}" 
                                           Foreground="{TemplateBinding Foreground}" 
                                           IsHitTestVisible="False" Opacity="0.6" HorizontalAlignment="Left" 
                                           TextAlignment="Center" 
                                           VerticalAlignment="Center" Margin="5,2,5,2" />
                            </Border>
                            <!--内容区-->
                            <Grid Grid.Column="1"  Margin="1">
                                <!--文本编辑-->
                                <TextBox  x:Name="PART_EditableTextBox" Style="{DynamicResource EditableTextBoxStyle}" 
                                          FontSize="{TemplateBinding FontSize}"
                                          HorizontalAlignment="Stretch" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" IsHitTestVisible="False"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          IsReadOnly="{TemplateBinding IsReadOnly}" 
                                          FontFamily="{TemplateBinding FontFamily}" 
                                          Foreground="{TemplateBinding Foreground}"
                                          Text="{Binding Path=Text,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"  />
                            </Grid>
                            
                            <!--弹出多选列表-->
                            <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" StaysOpen="False"
                               IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" VerticalOffset="2"
                                   Placement="Bottom">
                                <Grid Width="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}" 
                                      MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">

                                    <ScrollViewer VerticalScrollBarVisibility="Auto">
                                        <Grid Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                            <Path Stroke="{DynamicResource S.Brush.Accent}" Fill="{DynamicResource S.Brush.TextBackground.Default}" StrokeThickness="1" Stretch="Fill">
                                                <Path.Data>
                                                    <PathGeometry>
                                                        <PathFigure StartPoint="1,2">

                                                            <PolyLineSegment Points="95,2 96,1.5 97,2 99,2"></PolyLineSegment>

                                                            <ArcSegment Point="100,3" Size="1,1" SweepDirection="Clockwise"></ArcSegment>

                                                            <LineSegment Point="100,49"></LineSegment>

                                                            <ArcSegment Point="99,50" Size="1,1" SweepDirection="Clockwise"></ArcSegment>

                                                            <LineSegment Point="1,50"></LineSegment>

                                                            <ArcSegment Point="0,49" Size="1,1" SweepDirection="Clockwise"></ArcSegment>

                                                            <LineSegment Point="0,3"></LineSegment>

                                                            <ArcSegment Point="1,2" Size="1,1" SweepDirection="Clockwise"></ArcSegment>
                                                        </PathFigure>
                                                    </PathGeometry>
                                                </Path.Data>
                                            </Path>

                                            <ListBox x:Name="PART_ListBox" SelectionMode="Multiple" Margin="0,10,2,0"
                                             ItemsSource="{Binding ItemsSource,RelativeSource={RelativeSource TemplatedParent}}"
                                             ItemTemplate="{TemplateBinding ItemTemplate}"
                                             MaxHeight="{TemplateBinding MaxDropDownHeight}" 
                                             ItemContainerStyle="{DynamicResource CheckItemStyle}"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Grid>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--1.显示水印-->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                            <Setter TargetName="Message" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <!--编辑模式-->
                        <Trigger Property="IsEditable" Value="True">
                            <Setter TargetName="PART_DropDownToggle" Property="Grid.Column" Value="3" />
                            <Setter TargetName="PART_DropDownToggle" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="PART_DropDownToggle" Property="Background" Value="Transparent" />
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter TargetName="PART_DropDownToggle" Property="Focusable" Value="False" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{Binding Path=(base:ControlAttachProperty.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>
                            <Setter  Property="Foreground" TargetName="PART_AttachContent" Value="{Binding Path=(base:ControlAttachProperty.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>
                            <Setter  Property="Foreground" TargetName="PART_DropDownToggle" Value="{Binding Path=(base:ControlAttachProperty.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter  Property="BorderBrush" Value="{Binding Path=(base:ControlAttachProperty.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>

                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter  Property="BorderBrush" Value="{Binding Path=(base:ControlAttachProperty.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>
                            <Setter  Property="Foreground" Value="{DynamicResource S.Brush.Accent}" TargetName="PART_DropDownToggle"/>
                            <Setter  Property="Foreground" TargetName="PART_AttachContent" Value="{DynamicResource S.Brush.Accent}"/> 
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Root" Property="Opacity" Value="{StaticResource S.Opacity.Disable}"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--MultiComboBox包含清除Text按钮的样式 ClearButtonMultiComboBox -->
    <Style TargetType="{x:Type local:MultiComboBox}" x:Key="ClearButtonMultiComboBox" 
           BasedOn="{StaticResource DefaultMultiComboBox}">
        <Setter Property="base:ControlAttachProperty.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <local:FButton FIcon="&#xe6f4;" Style="{DynamicResource S.FButton.Style.Transparent}" 
                                   IsTabStop="False" FIconMargin="0"
                                   base:ControlAttachProperty.IsClearTextButtonBehaviorEnabled="True" 
                                   Command="base:ControlAttachProperty.ClearTextCommand" 
                                   CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type local:MultiComboBox}}}"
                                   IsEnabled="{Binding Path=IsReadOnly,RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type local:MultiComboBox}},
                        Converter={x:Static base:XConverter.TrueToFalseConverter},Mode=OneWay}"
                               Margin="1,3,0,4" FIconSize="13" Foreground="{TemplateBinding Foreground}"  Cursor="Arrow"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--MultiComboBox包含附加属性Label的样式 LabelMultiComboBox -->
    <Style TargetType="{x:Type local:MultiComboBox}" x:Key="LabelMultiComboBox" BasedOn="{StaticResource DefaultMultiComboBox}">
        <Setter Property="base:ControlAttachProperty.LabelTemplate" >
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border MinWidth="90" Background="{DynamicResource S.Brush.Accent}" CornerRadius="{DynamicResource S.Window.Item.CornerRadius.Left}">
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Right" Margin="2" Foreground="{DynamicResource S.Brush.TextForeground.White}"
                                   Text="{TemplateBinding Content}"></TextBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--MultiComboBox包含附加属性Label，以及ClearText按钮的样式 LabelClearButtonMultiComboBox -->
    <Style TargetType="{x:Type local:MultiComboBox}" x:Key="LabelClearButtonMultiComboBox" BasedOn="{StaticResource DefaultMultiComboBox}">
        <Setter Property="base:ControlAttachProperty.LabelTemplate" >
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border MinWidth="90" Background="{DynamicResource S.Brush.Accent}" CornerRadius="{DynamicResource S.Window.Item.CornerRadius.Left}">
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Right" Margin="2" Foreground="{DynamicResource S.Brush.TextForeground.White}"
                                   Text="{TemplateBinding Content}"></TextBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="base:ControlAttachProperty.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <local:FButton FIcon="&#xe6f4;" Style="{DynamicResource S.FButton.Style.Transparent}" 
                                   IsTabStop="False" FIconMargin="0"
                                   base:ControlAttachProperty.IsClearTextButtonBehaviorEnabled="True" 
                                   Command="base:ControlAttachProperty.ClearTextCommand" 
                                   CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type local:MultiComboBox}}}"
                                   IsEnabled="{Binding Path=IsReadOnly,RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type local:MultiComboBox}},
                                   Converter={x:Static base:XConverter.TrueToFalseConverter},Mode=OneWay}"
                                   Margin="0,3,0,4" FIconSize="13" 
                                   Foreground="{TemplateBinding Foreground}"  Cursor="Arrow"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--默认样式-->
    <Style TargetType="{x:Type local:MultiComboBox}" BasedOn="{StaticResource DefaultMultiComboBox}"></Style>

</ResourceDictionary>

